# Copyright Â© 2025 LeviftasTest authors. All rights reserved.
#
# Licensed under the GNU General Public License v3.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.gnu.org/licenses/gpl-3.0.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# issues-add-date.yml
#
# Automatically add the date to the titles of all issues
#
# - Author   : FrostLeo <frostleo.dev@gmail.com>
# - Created  : 2025/10/14
# - Modified : 2025/10/14

name: Add Date To Issue Title
on:
  issues:
    types: [opened]

jobs:
  add-date-to-issue-title:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add date to issue title
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ORIGINAL_TITLE: ${{ github.event.issue.title }}
        run: |
          CURRENT_DATE=$(date +%Y-%m-%d)
          
          # Check if title already has the correct format with pipe separator
          if echo "$ORIGINAL_TITLE" | grep -qE '^\[[^]]+\]:[[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2} \|'; then
              echo "Title already has the correct format, no changes needed"
              exit 0
          fi
          
          # Check various date patterns and normalize them
          
          # Pattern 1: [xxx]: YYYY-MM-DD XXXX (correct date, missing pipe)
          if echo "$ORIGINAL_TITLE" | grep -qE '^\[[^]]+\]:[[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]]'; then
              PREFIX=$(echo "$ORIGINAL_TITLE" | sed -E 's/^(\[[^]]+\]:[[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2})[[:space:]].*/\1/')
              CONTENT=$(echo "$ORIGINAL_TITLE" | sed -E 's/^\[[^]]+\]:[[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]]*//')
              # Remove existing pipe separator if present
              CONTENT=$(echo "$CONTENT" | sed -E 's/^[[:space:]]*\|[[:space:]]*//')
              NEW_TITLE="${PREFIX} | ${CONTENT}"
          
          # Pattern 2a: [xxx]: YYYY-MM-D or YYYY-M-DD (4-digit year, incomplete)
          elif echo "$ORIGINAL_TITLE" | grep -qE '^\[[^]]+\]:[[:space:]]*[0-9]{4}[-/][0-9]{1,2}[-/][0-9]{1,2}'; then
              PREFIX=$(echo "$ORIGINAL_TITLE" | sed -E 's/^(\[[^]]+\]:).*/\1/')
              CONTENT=$(echo "$ORIGINAL_TITLE" | sed -E 's/^\[[^]]+\]:[[:space:]]*[0-9]{4}[-/][0-9]{1,2}[-/][0-9]{1,2}[[:space:]]*//')
              # Remove existing pipe separator if present
              CONTENT=$(echo "$CONTENT" | sed -E 's/^[[:space:]]*\|[[:space:]]*//')
              NEW_TITLE="${PREFIX} ${CURRENT_DATE} | ${CONTENT}"
          
          # Pattern 2b: [xxx]: YY-MM-DD or other 2-digit year incomplete formats
          elif echo "$ORIGINAL_TITLE" | grep -qE '^\[[^]]+\]:[[:space:]]*[0-9]{2}[-/][0-9]{1,2}[-/][0-9]{1,2}'; then
              PREFIX=$(echo "$ORIGINAL_TITLE" | sed -E 's/^(\[[^]]+\]:).*/\1/')
              CONTENT=$(echo "$ORIGINAL_TITLE" | sed -E 's/^\[[^]]+\]:[[:space:]]*[0-9]{2}[-/][0-9]{1,2}[-/][0-9]{1,2}[[:space:]]*//')
              # Remove existing pipe separator if present
              CONTENT=$(echo "$CONTENT" | sed -E 's/^[[:space:]]*\|[[:space:]]*//')
              NEW_TITLE="${PREFIX} ${CURRENT_DATE} | ${CONTENT}"
          
          # Pattern 3a: [xxx]: MM/DD/YYYY or DD/MM/YYYY (4-digit year)
          elif echo "$ORIGINAL_TITLE" | grep -qE '^\[[^]]+\]:[[:space:]]*[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{4}'; then
              PREFIX=$(echo "$ORIGINAL_TITLE" | sed -E 's/^(\[[^]]+\]:).*/\1/')
              CONTENT=$(echo "$ORIGINAL_TITLE" | sed -E 's/^\[[^]]+\]:[[:space:]]*[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{4}[[:space:]]*//')
              # Remove existing pipe separator if present
              CONTENT=$(echo "$CONTENT" | sed -E 's/^[[:space:]]*\|[[:space:]]*//')
              NEW_TITLE="${PREFIX} ${CURRENT_DATE} | ${CONTENT}"
          
          # Pattern 3b: [xxx]: MM/DD/YY or DD/MM/YY (2-digit year)
          elif echo "$ORIGINAL_TITLE" | grep -qE '^\[[^]]+\]:[[:space:]]*[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2}($|[^0-9])'; then
              PREFIX=$(echo "$ORIGINAL_TITLE" | sed -E 's/^(\[[^]]+\]:).*/\1/')
              CONTENT=$(echo "$ORIGINAL_TITLE" | sed -E 's/^\[[^]]+\]:[[:space:]]*[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2}[[:space:]]*//')
              # Remove existing pipe separator if present
              CONTENT=$(echo "$CONTENT" | sed -E 's/^[[:space:]]*\|[[:space:]]*//')
              NEW_TITLE="${PREFIX} ${CURRENT_DATE} | ${CONTENT}"
          
          # Pattern 4: [xxx]: 2025-10 or 2025/10 (year-month only)
          elif echo "$ORIGINAL_TITLE" | grep -qE '^\[[^]]+\]:[[:space:]]*[0-9]{4}[-/][0-9]{1,2}($|[[:space:]])'; then
              PREFIX=$(echo "$ORIGINAL_TITLE" | sed -E 's/^(\[[^]]+\]:).*/\1/')
              CONTENT=$(echo "$ORIGINAL_TITLE" | sed -E 's/^\[[^]]+\]:[[:space:]]*[0-9]{4}[-/][0-9]{1,2}[[:space:]]*//')
              # Remove existing pipe separator if present
              CONTENT=$(echo "$CONTENT" | sed -E 's/^[[:space:]]*\|[[:space:]]*//')
              NEW_TITLE="${PREFIX} ${CURRENT_DATE} | ${CONTENT}"
          
          # Pattern 5: [xxx]: 10-14 or 10/14 (month-day only)
          elif echo "$ORIGINAL_TITLE" | grep -qE '^\[[^]]+\]:[[:space:]]*[0-9]{1,2}[-/][0-9]{1,2}($|[[:space:]])'; then
              PREFIX=$(echo "$ORIGINAL_TITLE" | sed -E 's/^(\[[^]]+\]:).*/\1/')
              CONTENT=$(echo "$ORIGINAL_TITLE" | sed -E 's/^\[[^]]+\]:[[:space:]]*[0-9]{1,2}[-/][0-9]{1,2}[[:space:]]*//')
              # Remove existing pipe separator if present
              CONTENT=$(echo "$CONTENT" | sed -E 's/^[[:space:]]*\|[[:space:]]*//')
              NEW_TITLE="${PREFIX} ${CURRENT_DATE} | ${CONTENT}"
          
          # Pattern 6: [xxx]: XXXX (no date at all)
          elif echo "$ORIGINAL_TITLE" | grep -qE '^\[[^]]+\]:[[:space:]]*'; then
              PREFIX=$(echo "$ORIGINAL_TITLE" | sed -E 's/^(\[[^]]+\]:).*/\1/')
              CONTENT=$(echo "$ORIGINAL_TITLE" | sed -E 's/^\[[^]]+\]:[[:space:]]*//')
              # Remove existing pipe separator if present
              CONTENT=$(echo "$CONTENT" | sed -E 's/^[[:space:]]*\|[[:space:]]*//')
              NEW_TITLE="${PREFIX} ${CURRENT_DATE} | ${CONTENT}"
          
          else
              # Title doesn't match expected pattern, leave it unchanged
              echo "Title doesn't match expected pattern, no changes made"
              echo "Original title: $ORIGINAL_TITLE"
              exit 0
          fi
          
          # Update the issue title
          gh issue edit $ISSUE_NUMBER --title "$NEW_TITLE"
          echo "Updated issue title from: $ORIGINAL_TITLE"
          echo "Updated issue title to: $NEW_TITLE"
          
          # Save the titles for the next step
          echo "ORIGINAL_TITLE=$ORIGINAL_TITLE" >> $GITHUB_ENV
          echo "NEW_TITLE=$NEW_TITLE" >> $GITHUB_ENV
          echo "TITLE_UPDATED=true" >> $GITHUB_ENV

      - name: Add comment about title update
        if: env.TITLE_UPDATED == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          COMMENT="**Automated Title Formatting Notice**

          > [!NOTE]
          > The issue title has been automatically updated to include a standardized date format.
          > 
          > **Original title:** \`${{ env.ORIGINAL_TITLE }}\`
          > **Updated title:** \`${{ env.NEW_TITLE }}\`
          > 
          > **Timestamp:** $TIMESTAMP
          > 
          > _This action was performed automatically by GitHub Actions_"
          
          gh issue comment $ISSUE_NUMBER --body "$COMMENT"