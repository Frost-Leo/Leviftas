# Copyright Â© 2025 Leviftas authors. All rights reserved.
#
# Licensed under the GNU General Public License v3.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.gnu.org/licenses/gpl-3.0.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# pr-add-header.yml
#
# Automatically add headers to new pull requests
#
# - Author   : FrostLeo <frostleo.dev@gmail.com>
# - Created  : 2025/10/15
# - Modified : 2025/10/15

name: Add Header To Pull Request
on:
  pull_request:
    types: [opened, edited]

jobs:
  add-header-to-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add Header and Labels to Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            let currentBody = pr.body || '';
            
            // Extract information from PR title
            const title = pr.title;
            let prType = null;
            let issueNumber = null;
            
            // Match patterns: gh-xxx [type]: or gh-xxx[type]: or [type]:
            const typeMatch = title.match(/\[([^\]]+)\]:/);
            if (typeMatch) {
              prType = typeMatch[1].toLowerCase();
            }
            
            // Extract issue number if present (supports both gh-xxx [type] and gh-xxx[type])
            const issueMatch = title.match(/gh-(\d+)(?:\s*\[[^\]]+\])?:/);
            if (issueMatch) {
              issueNumber = issueMatch[1];
            }
            
            // Type to label mapping (easily extensible)
            const typeLabelMap = {
              'feat': 'feature',
              'fix': 'bug', 
              'docs': 'documentation',
              'refactor': 'refactor',
              'test': 'test',
              'style': 'style',
              'perf': 'performance',
              'build': 'build',
              'ci': 'ci',
              'chore': 'chore'
            };
            
            // Add/update label if type is recognized
            if (prType && typeLabelMap[prType]) {
              try {
                // Get current labels
                const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number
                });
                
                // Remove old type labels
                const typeLabels = Object.values(typeLabelMap);
                const labelsToRemove = currentLabels.filter(label => 
                  typeLabels.includes(label.name) && label.name !== typeLabelMap[prType]
                );
                
                for (const label of labelsToRemove) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    name: label.name
                  });
                }
                
                // Add new label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: [typeLabelMap[prType]]
                });
                console.log(`Updated label to: ${typeLabelMap[prType]} for type: ${prType}`);
              } catch (error) {
                console.log(`Failed to update label: ${error.message}`);
              }
            }
            
            // Format creation date
            const createdAt = new Date(pr.created_at);
            const formattedDate = createdAt.toISOString().replace('T', ' ').split('.')[0] + ' UTC';
            
            // Build issue reference line
            let issueReference = '';
            if (issueNumber) {
              issueReference = `\n> **Related Issue**: #${issueNumber}`;
            }
            
            // Construct the header
            const header = `<!-- PR_HEADER_ADDED -->
            <div align="center">
              <img src="https://frost-leo.github.io/Leviftas/assets/images/github/pull-request/header-pull-request.svg" alt="Pull Request Header">
            </div>
            
            > [!NOTE]
            > **Pull Request Information:**
            > **Author**: [@${pr.user.login}](https://github.com/${pr.user.login})
            > **Created**: ${formattedDate}
            > **Pull Request**: #${pr.number}
            > **Target Branch**: \`${pr.base.ref}\`
            > **Source Branch**: \`${pr.head.ref}\`${issueReference}
            
            `;
            
            // Check if header already exists and update it
            if (currentBody.includes('<!-- PR_HEADER_ADDED -->')) {
              // Replace existing header
              currentBody = currentBody.replace(
                /<!-- PR_HEADER_ADDED -->[\s\S]*?(?=<img src="https:\/\/frost-leo\.github\.io\/Leviftas\/assets\/images\/github\/pull-request\/desc-|$)/,
                header
              );
              console.log(`Updated existing header for PR #${pr.number}`);
            } else {
              // Add new header
              currentBody = header + currentBody;
              console.log(`Added new header to PR #${pr.number}`);
            }
            
            // Replace section titles with SVG images
            currentBody = currentBody.replace(
              /## Description/g,
              '<img src="https://frost-leo.github.io/Leviftas/assets/images/github/pull-request/desc-description.svg" alt="Description">'
            );
            
            currentBody = currentBody.replace(
              /## Related Links/g,
              '<img src="https://frost-leo.github.io/Leviftas/assets/images/github/pull-request/desc-related-links.svg" alt="Related Links">'
            );
            
            // Update PR body
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              body: currentBody
            });
            
            console.log(`Header processing completed for PR #${pr.number}`);